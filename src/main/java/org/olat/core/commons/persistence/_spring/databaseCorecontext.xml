<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="
  http://www.springframework.org/schema/beans 
  http://www.springframework.org/schema/beans/spring-beans-3.0.xsd">

		
	<bean id="collectingAdditionalDBMappings" class="org.olat.core.commons.persistence.AdditionalMappingsListFactoryBean"/>
	
	<!-- Persistence unit manager -->
	<bean id="pum" class="org.olat.core.commons.persistence.OLATPersistenceUnitManager">
		<property name="additionalDBMappings" ref="collectingAdditionalDBMappings" />
  		<property name="persistenceXmlLocations">
    		<list>
     			<value>classpath:/org/olat/core/commons/persistence/_spring/core_persistence.xml</value>
			</list>
  		</property>
		<property name="defaultDataSource" ref="${db.vendor}PooledDataSource"/>
	</bean>
	
	<!-- EntityManagerFactory -->
	<bean id="emf" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
		<property name="persistenceUnitManager" ref="pum"/>
		<property name="jpaProperties" ref="${db.vendor}HibernateProperties"/>
	</bean>
	
    <bean id="AuditInterceptor" class="org.olat.core.commons.persistence.AuditInterceptor" />

	<bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="${db.vendor}PooledDataSource"/>
	</bean>

	<bean id="database" class="org.olat.core.commons.persistence.DBImpl" destroy-method="destroy">
		<property name="entityManagerFactory" ref="emf"/>
		<property name="dbVendor" value="${db.vendor}" />
	</bean>

	<bean id="persistenceHelper" class="org.olat.core.commons.persistence.PersistenceHelper">
		<constructor-arg>
			<props>
				<prop key="dbvendor">${db.vendor}</prop>
		        <prop key="mysqloptions">${db.url.options.mysql}</prop>
		    </props>
		</constructor-arg>
	</bean>

	<bean id="mysqlHibernateProperties" class="org.olat.core.commons.persistence.DBVendorHibernatePropertiesSimplification">
		<constructor-arg>
			<props>
		        <prop key="hibernate.dialect">org.hibernate.dialect.MySQL5Dialect</prop>
	        </props>            
		</constructor-arg>
		<property name="addMoreProperties" ref="hibernateProps" />
	</bean>

	<bean id="postgresqlHibernateProperties" class="org.olat.core.commons.persistence.DBVendorHibernatePropertiesSimplification">
		<constructor-arg>
			<props>
		        <prop key="hibernate.dialect">org.hibernate.dialect.PostgreSQLDialect</prop>
	        </props>            
		</constructor-arg>
		<property name="addMoreProperties" ref="hibernateProps" />
	</bean>

	<bean id="hibernateProps" class="org.olat.core.commons.persistence.DBVendorHibernatePropertiesSimplification">
		<constructor-arg>
	        <props>  
	            <!-- "validate, update, create, create-drop"  are valid entries for  hibernate.hbm2ddl.auto-->
	            <prop key="hibernate.hbm2ddl.auto">${db.hibernate.ddl.auto}</prop>
	            <prop key="hibernate.show_sql">${db.show_sql}</prop>
	            <!-- <entry key="hibernate.query.substitutions">true 1, false 0, yes 'Y', no 'N'</value></entry> -->
	            <prop key="hibernate.query.substitutions">true 1, false 0, yes 'Y', no 'N'</prop>         
	            <!-- for development phase only: -->
	            <!-- end for development phase only -->
	
				<prop key="hibernate.transaction.factory_class">org.hibernate.transaction.JDBCTransactionFactory</prop>
				<prop key="hibernate.jdbc.batch_size">0</prop>
				<prop key="hibernate.jdbc.use_streams_for_binary">true</prop>
				<prop key="hibernate.use_outer_join">true</prop>
				<prop key="hibernate.max_fetch_depth">10</prop>
	            <prop key="hibernate.cache.provider_class">${hibernate.caching.singlevm.class}</prop>
				<prop key="hibernate.cache.use_query_cache">${hibernate.caching.use.query.cache}</prop>
				<prop key="hibernate.cache.use_second_level_cache">${hibernate.use.second.level.cache}</prop>
				<prop key="hibernate.cache.region.factory_class">${hibernate.caching.cluster.class}</prop>
				<prop key="hibernate.cache.region.jbc2.query.localonly">true</prop>
				<prop key="hibernate.cache.region_prefix">olat</prop>
				<!-- from java.sql.Connection
					int TRANSACTION_READ_UNCOMMITTED = 1;
					int TRANSACTION_READ_COMMITTED   = 2;
					int TRANSACTION_REPEATABLE_READ  = 4;
					int TRANSACTION_SERIALIZABLE     = 8;
					olat works only with level 2; the database must support level 2
				-->
				<prop key="hibernate.connection.isolation">2</prop>
				<prop key="javax.persistence.lock.timeout">30000</prop>
	        </props>
		</constructor-arg>        
	</bean>

	<!-- c3p0 pooled JDBC connection -->
	<bean id="mysqlPooledDataSource"
		class="com.mchange.v2.c3p0.ComboPooledDataSource" lazy-init="true" destroy-method="close">
    	<!--  connection settings -->
    	<property name="driverClass"><value>com.mysql.jdbc.Driver</value></property>
		<property name="jdbcUrl"><value>jdbc:mysql://${db.host}:${db.host.port}/${db.name}?useUnicode=true&amp;characterEncoding=UTF-8</value></property>
		<property name="user" value="${db.user}" />
		<property name="password" value="${db.pass}" />
		<property name="minPoolSize" value="${db.hibernate.c3p0.minsize}" />
		<property name="maxPoolSize" value="${db.hibernate.c3p0.maxsize}" />
		<property name="maxIdleTime" value="1800" />
		<property name="maxStatements" value="10000" />
		<property name="autoCommitOnClose" value="false" />
		<property name="acquireIncrement" value="2" />
		<property name="idleConnectionTestPeriod" value="500" />
		<!-- property name="hibernate.c3p0.numHelperThreads" value="10" -->
		<property name="maxAdministrativeTaskTime" value="120" />
	</bean>
	
	<!-- c3p0 pooled JDBC connection -->
	<bean id="postgresqlPooledDataSource"
		class="com.mchange.v2.c3p0.ComboPooledDataSource" lazy-init="true" destroy-method="close">
    	<!--  connection settings -->
    	<property name="driverClass"><value>org.postgresql.Driver</value></property>
		<property name="jdbcUrl"><value>jdbc:postgresql://${db.host}:${db.host.port}/${db.name}</value></property>
		<property name="user" value="${db.user}" />
		<property name="password" value="${db.pass}" />
		<property name="minPoolSize" value="${db.hibernate.c3p0.minsize}" />
		<property name="maxPoolSize" value="${db.hibernate.c3p0.maxsize}" />
		<property name="maxIdleTime" value="1800" />
		<property name="maxStatements" value="10000" />
		<property name="autoCommitOnClose" value="false" />
		<property name="acquireIncrement" value="2" />
		<property name="idleConnectionTestPeriod" value="500" />
		<!-- property name="hibernate.c3p0.numHelperThreads" value="10" -->
		<property name="maxAdministrativeTaskTime" value="120" />
	</bean>

	<!-- The following dataresources are referenced from the statisticContext.xml and upgradeContext.xml, but are not used in the SessionFactory!
		 The SessionFactory's DB Connection is configured with the bean "${db.vendor}HibernateProperties".-->

	<!-- The mysql datasource checks upon startup whether the tables are of type InnoDB, if not it will not start. If you have an other type of transactional tables just switch back the spring config
	to the normal  org.springframework.jdbc.datasource.DriverManagerDataSource and the check is gone.-->                  
	<bean id="mysqlDataSource" class="org.olat.core.commons.persistence.InnoDBAwareDriverManagerDataSource" lazy-init="true" init-method="init">
		<property name="driverClassName"><value>com.mysql.jdbc.Driver</value></property>
		<property name="url"><value>jdbc:mysql://${db.host}:${db.host.port}/${db.name}?useUnicode=true&amp;characterEncoding=UTF-8</value></property>
		<property name="username" value="${db.user}" />
		<property name="password" value="${db.pass}" />
		<property name="dbVendor" value="${db.vendor}" />
	</bean>

	<bean id="postgresqlDataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource" lazy-init="true">
		<property name="driverClassName"><value>org.postgresql.Driver</value></property>
		<property name="url"><value>jdbc:postgresql://${db.host}:${db.host.port}/${db.name}</value></property>
		<property name="username" value="${db.user}" />
		<property name="password" value="${db.pass}" />
	</bean>
	
</beans>
