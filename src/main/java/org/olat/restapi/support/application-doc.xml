<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<applicationDocs targetNamespace="http://wadl.dev.java.net/2009/02">

    <doc xml:lang="en" title="Documentation of OpenOLAT REST API">
         <p>The goal of the REST API is to provide an easy way to exchange
         URLs. It is also used to integrate with other systems such as student
         administration, external course administration and/or external learning group
         administration.;</p>
         
         <h2>Concepts</h2>
         <p>Representational State Transfer or REST is a style of architecture to be primarily used with
         the HTTP protocol, but not exclusively. In the case of HTTP, it utilizes all 
         its features: URIs to describe resources, HTTP Methods as "verbs" to manipulate resources 
         (GET to retrieve resources, PUT to create new ones, POST to modify them, DELETE...),
         HTTP Headers and Media Types for content negotiation...</p>
         <p>In OpenOLAT, the JRS-311 is used as a backend for the implementation of our REST API. JSR-311 is a standard
         from J2EE. We use the reference implementation from the following standard: <a href="https://jersey.dev.java.net/">Jersey</a>.</p>
         <img src="schema.jpg" title="schema" />
         
         <h2>Security</h2>
         <p>The security is based on a two level mechanism, as it is in OpenOLAT.</p>
         <ol>
         	<li>The first level is a servlet filter which collects all requests to the REST API. This filter
         	determines whether the URI is open to everyone (/api, /ping, /auth...) or if it needs an authentication. The authentication
         	itself is delegated to a web service.</li>
         	<li>The second level happens in all entry points of the REST API. Every method checks if
         	the user (if a user must be authenticated) has enough privileges to operate on the desired resource.</li>
         </ol>
         <p>To maintain a valid authentication over several requests, the filter proposes two methods:</p>
         <ol>
         	<li>Reuse the session cookie on every request. The advantage of this method is that OpenOLAT
         	doesn't need to create a session on every request.</li>
         	<li>If you cannot use the session cookie, the filter always adds an HTTP Header (X-OLAT-TOKEN) to
         	the response. Send this token with the next request to maintain your privileges.</li>
         </ol>
         
         <h2>Configuration</h2>
         <p>A spring bean allows to configure Resources, Singletons and Providers; either statically
         with the XML configuration of the bean (<code>/org/olat/restapi/_spring/restApiContext.xml</code>) or
         programmatically by adding or removing classes and singletons to/from the bean (bean id is the
         same as its interface: <code>org.olat.restapi.support.RestRegistrationService</code>).</p>
         <p>OpenOLAT uses the standard JAXB provider from Jersey to produce XML from java objects, as well as 
         the JSON provider from <a href="http://jackson.codehaus.org/">Jackson</a>, which reuses
         the same JAXB annotations.</p> 
         <p><strong>Very important!</strong> All configuration settings must be done before the Jersey's servlet starts.</p>
         
         <h2>Example</h2>
         <p>Here is a little example on how to create a user and add it to a learning group:</p>
         <ol>
         	<li>PUT http://www.frentix.com/olat/restapi/users<br />
         	HTTP Header: Content-Type application/json<br />
         	Response: 200</li>
         	<li>GET http://www.frentix.com/olat/restapi/groups<br />
         	HTTP Header: Accept application/json<br />
         	Response: 200</li>
         	<li>Choose a group</li>
         	<li>PUT http://www.frentix.com/olat/restapi/groups/{groupId}/users/{identityKey}<br />
         	Response: 200</li>
         </ol>
         
         <h2>Documentation</h2>
         <p>This documentation is based on the WADL format. The XML file is automatically
         generated by Jersey on runtime. For documentation purposes, this file is the base
         of a four step Maven process to produce a human readable HTML file.</p>
         <ol>
         	<li>Generate a XSD schema from all the Java classes used by JAXB for mapping</li>
         	<li>Generate Javadoc with a custom doclet for WADL</li>
         	<li>Generate WADL with the output of the two preceding steps</li>
         	<li>Produce the final HTML documentation with XSLT</li>
         </ol>
         <p>To add java classes annoted with JAXB, you must update the pom file in the OpenOLAT directory
         under the artfact <code>maven-jaxb-schemagen-plugin</code>.</p>
         <p>To add resources, you must add the packages to the following plugins configurations:
         <code>maven-javadoc-plugin</code> and <code>maven-wadl-plugin</code>.
         Be aware that the first uses commas to seperates the packages and the second semicolons. Both  recursively search all resources under the packages.</p>
         <p>Examples for the documentation can only be generated for XML. This is a limitation of the
         maven plugin.</p>
         
         <h2>Contents of resources</h2>
    </doc>
    
</applicationDocs>