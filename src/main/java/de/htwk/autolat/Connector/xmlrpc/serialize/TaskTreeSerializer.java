/*
 * Warning: This is a generated file. Edit at your own risk.
 * generated by Gen.hs on Wed Oct 28 18:26:49 CET 2009.
 */

package de.htwk.autolat.Connector.xmlrpc.serialize;
import de.htwk.autolat.Connector.types.*;

import java.util.List;
import redstone.xmlrpc.*;

public class TaskTreeSerializer
{
    private static final Serializer<TaskTree> inst =
        new Serializer<TaskTree>()
        {
            Serializer<Task> taskSerializer =
                new Serializer<Task>()
                {
                    Serializer<String> taskNameSerializer = null;
                    
                    public Object serialize(Task val)
                    {
                        if (taskNameSerializer == null)
                            taskNameSerializer = StringSerializer.getInstance();
                        
                        XmlRpcStruct inner = new XmlRpcStruct();
                        inner.put("task_name", taskNameSerializer.serialize(val.getTaskName()));
                        
                        XmlRpcStruct outer = new XmlRpcStruct();
                        outer.put("Task", inner);
                        return outer;
                    }
                    
                }
                ;
            Serializer<Category> categorySerializer =
                new Serializer<Category>()
                {
                    Serializer<String> categoryNameSerializer = null;
                    Serializer<List<TaskTree>> subTreesSerializer = null;
                    
                    public Object serialize(Category val)
                    {
                        if (categoryNameSerializer == null)
                            categoryNameSerializer = StringSerializer.getInstance();
                        if (subTreesSerializer == null)
                            subTreesSerializer = new ListSerializer<TaskTree>(TaskTreeSerializer.getInstance());
                        
                        XmlRpcStruct inner = new XmlRpcStruct();
                        inner.put("category_name", categoryNameSerializer.serialize(val.getCategoryName()));
                        inner.put("sub_trees", subTreesSerializer.serialize(val.getSubTrees()));
                        
                        XmlRpcStruct outer = new XmlRpcStruct();
                        outer.put("Category", inner);
                        return outer;
                    }
                    
                }
                ;
            public Object serialize(TaskTree val)
            {
                if (val.isTask())
                    return taskSerializer.serialize(val.getTask());
                if (val.isCategory())
                    return categorySerializer.serialize(val.getCategory());
                return null;
            }
            
        }
        ;
    
    public static Serializer<TaskTree> getInstance()
    {
        return inst;
    }
    
}
