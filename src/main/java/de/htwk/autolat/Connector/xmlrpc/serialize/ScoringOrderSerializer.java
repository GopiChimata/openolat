/*
 * Warning: This is a generated file. Edit at your own risk.
 * generated by Gen.hs on Thu Jan 21 17:56:48 CET 2010.
 */

package de.htwk.autolat.Connector.xmlrpc.serialize;
import de.htwk.autolat.Connector.types.*;

import java.util.List;
import redstone.xmlrpc.*;

@SuppressWarnings({"unused", "unchecked"})
public class ScoringOrderSerializer
{
    private static final Serializer<ScoringOrder> inst =
        new Serializer<ScoringOrder>()
        {
            Serializer<Increasing> increasingSerializer =
                new Serializer<Increasing>()
                {
                    
                    public Object serialize(Increasing val)
                    {
                        
                        XmlRpcArray inner = new XmlRpcArray();
                        
                        XmlRpcStruct outer = new XmlRpcStruct();
                        outer.put("Increasing", inner);
                        return outer;
                    }
                    
                }
                ;
            Serializer<None> noneSerializer =
                new Serializer<None>()
                {
                    
                    public Object serialize(None val)
                    {
                        
                        XmlRpcArray inner = new XmlRpcArray();
                        
                        XmlRpcStruct outer = new XmlRpcStruct();
                        outer.put("None", inner);
                        return outer;
                    }
                    
                }
                ;
            Serializer<Decreasing> decreasingSerializer =
                new Serializer<Decreasing>()
                {
                    
                    public Object serialize(Decreasing val)
                    {
                        
                        XmlRpcArray inner = new XmlRpcArray();
                        
                        XmlRpcStruct outer = new XmlRpcStruct();
                        outer.put("Decreasing", inner);
                        return outer;
                    }
                    
                }
                ;
            public Object serialize(ScoringOrder val)
            {
                if (val.isIncreasing())
                    return increasingSerializer.serialize(val.getIncreasing());
                if (val.isNone())
                    return noneSerializer.serialize(val.getNone());
                if (val.isDecreasing())
                    return decreasingSerializer.serialize(val.getDecreasing());
                return null;
            }
            
        }
        ;
    
    public static Serializer<ScoringOrder> getInstance()
    {
        return inst;
    }
    
}
