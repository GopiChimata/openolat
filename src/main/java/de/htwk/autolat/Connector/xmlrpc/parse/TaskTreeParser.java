/*
 * Warning: This is a generated file. Edit at your own risk.
 * generated by Gen.hs on Wed Oct 28 18:26:49 CET 2009.
 */

package de.htwk.autolat.Connector.xmlrpc.parse;
import de.htwk.autolat.Connector.types.*;

import java.util.List;

public class TaskTreeParser
{
    private static final Parser<TaskTree> inst =
        new AlternativeParser<TaskTree>(
            new StructFieldParser<TaskTree>(
                "Task",
                new Parser<TaskTree>()
                {
                    Parser<String> taskNameParser = null;
                    
                    public TaskTree parse(Object val) throws ParseErrorBase
                    {
                        if (taskNameParser == null)
                            taskNameParser = new StructFieldParser<String>(
                                                 "task_name",
                                                 StringParser.getInstance());
                        return new Task(
                            taskNameParser.parse(val));
                    }
                    
                }
                
            ),
            new StructFieldParser<TaskTree>(
                "Category",
                new Parser<TaskTree>()
                {
                    Parser<String> categoryNameParser = null;
                    Parser<List<TaskTree>> subTreesParser = null;
                    
                    public TaskTree parse(Object val) throws ParseErrorBase
                    {
                        if (categoryNameParser == null)
                            categoryNameParser = new StructFieldParser<String>(
                                                     "category_name",
                                                     StringParser.getInstance());
                        if (subTreesParser == null)
                            subTreesParser = new StructFieldParser<List<TaskTree>>(
                                                 "sub_trees",
                                                 new ListParser<TaskTree>(TaskTreeParser.getInstance()));
                        return new Category(
                            categoryNameParser.parse(val),
                            subTreesParser.parse(val));
                    }
                    
                }
                
            )
        );
    
    public static Parser<TaskTree> getInstance()
    {
        return inst;
    }
    
}
